; 3.12
; ========================================================================
(define (last-pair x)
  (if (null? (cdr x))
      x
      (last-pair (cdr x))))

(define (append! x y)
  (set-cdr! (last-pair x) y)
  x)

;; 1 ]=> (cdr x)
;; ;Value 12: (b)
;;     +---+  +---+
;; x-->|+|+-->|+|/|
;;     +|--+  +|--+
;;      |      |
;;      v      v
;;     +-+    +-+
;;     |a|    |b|
;;     +-+    +-+
;;
;;     +---+  +---+
;; y-->|+|+-->|+|/|
;;     +|--+  +|--+
;;      |      |
;;      v      v
;;     +-+    +-+
;;     |c|    |d|
;;     +-+    +-+

;; 1 ]=> (cdr x)
;; ;Value 12: (b c d)
;;     +---+  +---+
;; x-->|+|+-->|+|+---+
;;     +|--+  +|--+  |
;;      |      |     |
;;      v      v     |
;;     +-+    +-+    |
;;     |a|    |b|    |
;;     +-+    +-+    |
;; +-----------------+
;; v   +---+  +---+
;; y-->|+|+-->|+|/|
;;     +|--+  +|--+
;;      |      |
;;      v      v
;;     +-+    +-+
;;     |c|    |d|
;;     +-+    +-+

; 3.13
; ========================================================================
(define (make-cycle x)
  (set-cdr! (last-pair x) x)
  x)

;; (define z (make-cycle (list 'a 'b 'c)))
"
    +---+  +---+  +---+
z-->|+|+-->|+|+-->|+|+--+
^   +|--+  +|--+  +|--+ |
|    |      |      |    |
|    v      v      v    |
|   +-+    +-+    +-+   |
|   |a|    |b|    |c|   |
|   +-+    +-+    +-+   |
|                       |
+-----------------------+
"
;; If you call (last-pair) on this it will cause infinite recursion!

